def dfs(prev, i, color):
    global k
    if a[i][i] == 0:
        a[i][i] = color
        if color == 2:
            k += 1
        for j in range(n):
            if j != prev:
                if a[i][j] == 0:  # В дополненном графе этот 0 означает, что у i-ой вершины есть ребро с j-ой вершиной
                    # Заменяем один вариант цвета на второй:
                    if color == 2:
                        next_color = -2
                    else:
                        next_color = 2
                    if not dfs(i, j, next_color):  # Рекурсивно идем смотреть соседнюю вершину нашего дополненного графа
                        return False
        return True
    elif a[i][i] == color:
        return True
    else:  # Если окраска вершины i равна окраске соединенной с ней в дополненном графе вершиной,
        return False  # то дополненный граф не двудольный и разбить изначальный граф на две клики нельзя


# Принимаем входные данные:
n, m = map(int, input().split())
a = [[0]*n for i in range(n)]

# Создаем матрицу смежности графа:
for _ in range(m):
    i, j = map(int, input().split())
    a[i - 1][j - 1] = 1
    a[j - 1][i - 1] = 1

# Чтобы узнать, можно ли разбить граф на две клики, надо взять дополнение графа и проверить, является ли он двудольным
# Если дополнение графа двудольное, то его вершины можно окрасить в два разных цвета так, чтобы на концах каждого ребра
# дополненного(!) графа вершины были разного цвета
# Пробуем это сделать (дальше работаем с дополнением изначального графа, т.е. связность вершин в матрице смежности
# будут обозначены не единицами, а нулями):
color = -2  # Два "разных цвета" будем обозначать цифрами -2 и 2
k = 0  # Это счётчик вершин одной из клик
answer = True
for i in range(n):
    if a[i][i] == 0:  # Если вершина еще не окрашена
        color *= -1
        if not dfs(-1, i, color):  # "Окрасим" вершину i и далее рекурсивно все достижимые из нее вершины
            answer = False
            break

#  Распечатка ответа:
if answer:
    print(k)
    for i in range(n):
        if a[i][i] == 2:
            print(i + 1, end=' ')
    print()
    for i in range(n):
        if a[i][i] == -2:
            print(i + 1, end=' ')
else:
    print(-1)


